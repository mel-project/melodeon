
def __dyn_equal(x: Any, y: Any): Nat =
    if x is Nat && y is Nat then
        x === y
    else if x is [Any..] && y is [Any..] then
        __vector_equal(x, y)
    # else if x is Bytes && y is Bytes then
    #     __bytes_equal(x, y)
    else 0

def __vector_equal(x: [Any..], y: [Any..]): Nat =
    let x_len = len(x) in
    let y_len = len(y) in
    if x_len === y_len then
        if x_len == 0 then
            1
        else
            x[0] == y[0] && __vector_equal(x[1..x_len], y[1..y_len])
    else 0

def __istype_nat(x: Any): Nat = unsafe extern call "typeq" (x) :! Nat === 0

def __istype_bytes(x: Any): Nat = unsafe extern call "typeq" (x) :! Nat === 1

def __dyn_append(x: Any, y: Any): Any = 
    if x is [Any..] && y is [Any..] then
        x +^+ y
    else if x is Bytes && y is Bytes then
        x +|+ y
    else
        0


def __istype_vectorof_helper(inner: (Any) -> Nat, v: [Any..]): Nat =
    let vector_length = len(v) in
    if vector_length == 0 then
        1
    else
        inner(v[0]) && __istype_vectorof_helper(inner, v[1..vector_length])

def __istype_vectorof(inner: (Any) -> Nat): (Any) -> Nat = 
    (possible_vector: Any) -> 
        if !(unsafe extern call "typeq" (possible_vector) :! Nat == 2) then 
            0
        else
            let vector = unsafe possible_vector :! [Any..] in
            __istype_vectorof_helper(inner, vector)

def __istype_vector_by_idx_helper(checkers: [(Any) -> Nat..], v: [Any..]): Nat =
    if len(checkers) === len(v) then
        if len(checkers) === 0 then
            1
        else
            checkers[0](v[0]) && __istype_vector_by_idx_helper(checkers[1..len(checkers)], v[1..len(v)])
    else 0

def __istype_vector_by_idx(checkers: [(Any) -> Nat..]): (Any) -> Nat = 
    (possible_vector: Any) ->
        if possible_vector is [Any..] then
            __istype_vector_by_idx_helper(checkers, possible_vector)
        else 0

def len(x: Bytes | [Any..]): Nat = 
    if x is Bytes then
        unsafe extern call "blen" (x) :! Nat
    else
        unsafe extern call "vlen" (x) :! Nat