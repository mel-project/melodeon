struct CoinID {
	txhash: %[32],
	index: Nat
}

struct CoinData {
	covhash: %[32],
	value: Nat,
	denom: Nat,
	additional_data: Any,
}

type RawCoinID = [%[32], Nat]
type RawCoinData = [%[32], Nat, %[], %[]]
type Hash = %[32]

struct Transaction {
	kind: Nat,
	inputs: [RawCoinID;],
	outputs: [RawCoinData;],
	fee: Nat,
	scripts: [%[];],
	data: %[],
	sigs: [%[];]
}

# Wrappers for the environment

def env_spender_tx() =
	let raw_tx = unsafe extern "SPENDER-TX" :! [Any; 7] in 
 	Transaction {
		kind: unsafe raw_tx[0] :! Nat,
		inputs: unsafe raw_tx[1] :! [RawCoinID ;],
		outputs: unsafe raw_tx[2] :! [RawCoinData ;],
		fee: unsafe raw_tx[3] :! Nat,
		scripts: unsafe raw_tx[4] :! [%[] ;],
		data: unsafe raw_tx[5] :! %[],
		sigs: unsafe raw_tx[6] :! [%[] ;]
	}

def env_spender_tx_hash() = unsafe unsafe extern "SPENDER-TX-HASH" :! Hash
def env_parent_tx_hash() = unsafe extern "PARENT-TX-HASH" :! Hash
def env_parent_index() = unsafe extern "PARENT-INDEX" :! Nat
def env_self_hash() = unsafe extern "SELF-HASH" :! Hash
def env_parent_value() = unsafe extern "PARENT-VALUE" :! Nat
def env_parent_denom() = unsafe extern "PARENT-DENOM" :! Nat
def env_parent_data() = unsafe extern "PARENT-DATA" :! %[]
def env_parent_height() = unsafe extern "PARENT-HEIGHT" :! Nat
def env_spender_index() = unsafe extern "SPENDER-INDEX" :! Nat


# Vector tools
def vlen(vec: [Any ;]) : Nat =
	unsafe
		extern call "v-len" (vec)
	:! Nat

def blen(bytes: %[]) : Nat =
	unsafe 
		extern call "b-len" (bytes)
	:! Nat

def range<$n>(x: {$n..$n}) =
    unsafe let accum = [] :! [Nat; $n] in
    let ctr = 0 :: Nat in
    loop $n do
        set! accum = (accum ++ [ctr]) :! [Nat; $n]; 
        set! ctr = ctr + 1
    done with accum

def zip<$n, T, U>(x: [T; $n], y: [U; $n]) =
    for i in range($n)
    fold accum = [] :: [[T, U]; 0] with
        accum ++ [[unsafe_idx(x, i), unsafe_idx(y, i)]]

def enumerate<$n, T>(x: [T; $n]) = zip(range($n), x)

def unsafe_idx<$n, T>(x: [T;], i: Nat) = unsafe (x :! [T; 1])[i :! {0}]

# Conversions

def b2n(b: %[32]) = unsafe extern call "btoi" (b) :! Nat
def n2b(b: Nat) = unsafe extern call "itob" (b) :! %[32]

# signatures
def ed25519_verify<$n>(msg: %[$n], public_key: %[32], signature: %[32]) =
	unsafe extern call "sigeok" (msg, public_key, signature) :! {0..1}