// "lexer" items
reserved    = @{"let" | "in" | "if" | "else" | "for" | "fold" | "cast" | "ann" | "loop" }
nat_literal = @{ !reserved ~ ASCII_DIGIT+ }
type_name   = @{ !reserved ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_") *  }
var_name    = @{ !reserved ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")* }
cgvar_name  = @{ !reserved ~ "$" ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")* }
add         = {"+"}
sub         = {"-"}
mul         = {"*"}
div         = {"/"}
lor         = {"||"}
land        = {"&&"}
equal       = {"=="}
ge          = {">"}
geq         = {">="}
le          = {"<"}
leq         = {"<="}
WHITESPACE = _{" " | "\t" | "\n"}

// top-level program
program = {
    SOI ~ definition+ ~ "-" ~ "-" ~ "-" ~ expr ~ EOI |
    SOI ~ definition+ ~ EOI |
    SOI ~ expr ~ EOI
}

// definitions
definition = {
    fun_def | fun_def_gen
}

fun_def = { "def" ~ var_name ~ "(" ~ fun_args ~ ")" ~ (":" ~ type_expr)? ~ "=" ~ expr }
fun_def_gen = { "def" ~ var_name ~ "<" ~ generic_params ~ ">" ~ "(" ~ fun_args ~ ")" ~ (":" ~ type_expr)? ~ "=" ~ expr }
generic_params = {
    ((cgvar_name) ~ ",")* ~ cgvar_name |
    ((cgvar_name) ~ ",")* ~ ((type_name) ~ ",")* ~ type_name
}

fun_args = {
    (var_name ~ ":" ~ type_expr ~ ",")* ~ var_name ~ ":" ~ type_expr
}

// types
type_expr = _{
    type_union
}
type_union = { type_terminal ~ ("|" ~ type_terminal)* }
type_terminal = _{
    type_vector             |
    type_vectorof           |
    type_name               |
    "(" ~ type_expr ~ ")"  
}
type_vector = { "[" ~ (type_expr ~ ",")* ~ type_expr? ~ "]" } 
type_vectorof = { "[" ~ type_expr ~ ";" ~ const_expr ~ "]" }

// const-expr. A precedence tower, similar to the bin-expr one.
const_expr = _{
    const_add_expr
}
const_add_expr = { const_mult_expr ~ (add ~ const_mult_expr)* }
const_mult_expr = { const_term_expr ~ (mul ~ const_term_expr)* }
const_term_expr = _{ nat_literal | cgvar_name }

// expression
expr = _{
    cflow_expr |
    bin_expr    
}

cflow_expr = _{ let_expr | if_expr }

let_expr = {
    "let" ~ var_name ~ "=" ~ expr ~ "in" ~ expr
}

if_expr = {
    "if" ~ expr ~ "then" ~ expr ~ "else" ~ expr
}

bin_expr = _{
    rel_expr
}

// The "precedence" tower. From *loosest-binding* to tightest-binding.
// Unlike in a CFG, in a PEG grammar, this is most naturally expressed as a rule with unbounded arity, rather than a binary rule.
// This does require a bit of postprocessing (basically a fold) to turn into a binary form.
rel_expr    = { add_expr ~ ((lor | land | equal | ge | geq | le | leq) ~ add_expr)*}
add_expr    = { mult_expr ~ ((add | sub) ~ mult_expr)* }
mult_expr   = { apply_expr ~ ((mul | div) ~ apply_expr)* }
apply_expr  = {
    terminal_expr ~ (call_args | field_access | vector_ref | vector_update)*
}

call_args       = { "(" ~ (expr ~ ",")* ~ expr? ~ ")" }
field_access    = { "." ~ var_name }
vector_ref      = { "[" ~ expr ~ "]" }
vector_update   = { "[" ~ expr ~ "=>" ~ expr ~ "]" }

terminal_expr   = _{
    nat_literal |
    var_name |
    cflow_expr |
    "(" ~ expr ~ ")"
}
