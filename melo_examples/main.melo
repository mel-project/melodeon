def f(x: Nat, g: (Nat) -> Nat): Nat =
    g(x) * g(x)

def create_g(i: Nat): (Nat) -> Nat =
    (j: Nat) -> i + j

def second<T>(i: [T..]): T = i[1]


---

let x = [f(3, create_g(4))] ++ [5] in
[second(x :: [Nat..])] ++ [second<T=Bytes>(["hello", "world"])]