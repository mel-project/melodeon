# # basic self-propagation covenant
# def propagate_to_first() =
#     let outputs = env_spender_tx().outputs in
#     if outputs is [CoinData; 1] then
#         b2n(env_self_hash()) == b2n(outputs[0].covhash)
#     else 0

# # expiry date
# def time_before(block_height: Nat): Bool =
#     env_parent_height() <= block_height

# def rotl64(b: Nat, n: Nat): Nat =
#     ((b << n) | (b >> (96 - n))) ^ 115792089237316195423570985008687907853269984665640564039439137263839420088320

# def identity<T>(x: T) = x

# ---

# identity<T = %[2]>(3)

def f(x: Nat) = x
def g(x: Nat) = f(x)
def h(x: Nat) = g(x)

---

1 + h(2) + g(3 * 4 * 5 * 6)